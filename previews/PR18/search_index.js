var documenterSearchIndex = {"docs":
[{"location":"model_kit.html#ModelKit-1","page":"ModelKit","title":"ModelKit","text":"","category":"section"},{"location":"model_kit.html#Expressions-and-Variables-1","page":"ModelKit","title":"Expressions and Variables","text":"","category":"section"},{"location":"model_kit.html#","page":"ModelKit","title":"ModelKit","text":"Expression\nVariable\n@var\n@unique_var","category":"page"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.Expression","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.Expression","text":"Expression <: Number\n\nA symbolic expression.\n\njulia> expr = (Variable(:x) + 1)^2\n(1 + x)^2\n\njulia> Expression(2)\n2\n\njulia> Expression(Variable(:x))\nx\n\n\n\n\n\n","category":"type"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.Variable","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.Variable","text":"Variable(name::Union{String,Symbol}, indices...) <: Number\n\nA data structure representing a variable.\n\njulia> Variable(:a)\na\n\njulia> Variable(:x, 1)\nx₁\n\njulia> Variable(:x, 10, 5)\nx₁₀₋₅\n\nEquality and ordering\n\nVariables are identified by their name and indices. That is, two variables are equal if and only if they have the same name and indices.\n\njulia> Variable(:a) == Variable(:a)\ntrue\n\njulia> Variable(:a, 1) == Variable(:a, 2)\nfalse\n\nSimilarly, variables are first ordered lexicographically by their name and then by their indices.\n\njulia> Variable(:a, 1) < Variable(:a, 2)\ntrue\n\njulia> Variable(:a, 1) < Variable(:b, 1)\ntrue\n\njulia> a = [Variable(:a, i, j) for i in 1:2, j in 1:2]\n2×2 Array{Variable,2}:\n a₁₋₁  a₁₋₂\n a₂₋₁  a₂₋₂\n\njulia> sort(vec(a))\n4-element Array{Variable,1}:\n a₁₋₁\n a₂₋₁\n a₁₋₂\n a₂₋₂\n\n\n\n\n\n","category":"type"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.@var","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.@var","text":"@var variable1 variable2 ...\n\nDeclare variables with the given names and automatically create the variable bindings. The macro supports indexing notation to create Arrays of variables.\n\nExamples\n\njulia> @var a b x[1:2] y[1:2,1:3]\n(a, b, Variable[x₁, x₂], Variable[y₁₋₁ y₁₋₂ y₁₋₃; y₂₋₁ y₂₋₂ y₂₋₃])\n\njulia> a\na\n\njulia> b\nb\n\njulia> x\n2-element Array{Variable,1}:\n x₁\n x₂\n\njulia> y\n2×3 Array{Variable,2}:\n y₁₋₁  y₁₋₂  y₁₋₃\n y₂₋₁  y₂₋₂  y₂₋₃\n\n\n\n\n\n","category":"macro"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.@unique_var","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.@unique_var","text":"@unique_var variable1 variable2\n\nThis is similar to @var with the only difference that the macro automatically changes the names of the variables to ensure uniqueness. However, the binding is still to the declared name. This is useful to ensure that there are no name collisions.\n\nExamples\n\njulia> @unique_var a b\n(a#591, b#592)\n\njulia> a\na#591\n\njulia> b\nb#592\n\n\n\n\n\n","category":"macro"},{"location":"model_kit.html#Functions-1","page":"ModelKit","title":"Functions","text":"","category":"section"},{"location":"model_kit.html#","page":"ModelKit","title":"ModelKit","text":"coefficients\ndegree\ndegrees(::AbstractVector{Expression})\ndifferentiate\ndense_poly\nevaluate\nexpand\nexponents_coefficients\nhorner\nnvariables(::Expression)\nmonomials\nsubs\nrand_poly\nto_number\nvariables(::Expression)","category":"page"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.coefficients","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.coefficients","text":"coefficients(f::Expression, vars::AbstractVector{Variable})\n\nReturn all coefficients of the given polynomial f for the given variables vars. This assumes that the expression f is already expanded, e.g., with expand.\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.degree","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.degree","text":"degree(f::Expression, vars = variables(f); expanded = false)\n\nCompute the degree of the expression f  in vars. Unless expanded is true the expression is first expanded.\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.degrees-Tuple{AbstractArray{Expression,1}}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.degrees","text":"degrees(f::AbstractVector{Expression}, vars = variables(f); expanded = false)\n\nCompute the degrees of the expressions f in vars. Unless expanded is true the expressions are first expanded.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.differentiate","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.differentiate","text":"differentiate(expr::Expression, var::Variable, k = 1)\ndifferentiate(expr::AbstractVector{Expression}, var::Variable, k = 1)\n\nCompute the k-th derivative of expr with respect to the given variable var.\n\ndifferentiate(expr::Expression, vars::AbstractVector{Variable})\n\nCompute the partial derivatives of expr with respect to the given variable variables vars. Retuns a Vector containing the partial derivatives.\n\ndifferentiate(exprs::AbstractVector{Expression}, vars::AbstractVector{Variable})\n\nCompute the partial derivatives of exprs with respect to the given variable variables vars. Returns a Matrix where the each row contains the partial derivatives for a given expression.\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.dense_poly","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.dense_poly","text":"dense_poly(vars::AbstractVector{Variable}, d::Integer; homogeneous::Bool = false)\n\nCreate a dense polynomial of degree d in the given variables variables where each coefficient is a parameter. Returns a tuple with the first argument being the polynomial and the second the parameters.\n\njulia> @var x y;\n\njulia> f, c = dense_poly([x, y], 2);\n\njulia> f\nc#262₁ + x*c#262₂ + x^2*c#262₄ + y*c#262₃ + y^2*c#262₆ + x*y*c#262₅\n\njulia> c\n6-element Array{Variable,1}:\n c#262₁\n c#262₂\n c#262₃\n c#262₄\n c#262₅\n c#262₆\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.evaluate","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.evaluate","text":"evaluate(expr::Expression, subs...)\nevaluate(expr::AbstractArray{Expression}, subs...)\n\nEvaluate the given expression.\n\nExample\n\njulia> @var x y;\n\njulia> evaluate(x^2, x => 2)\n4\n\njulia> evaluate(x * y, [x,y] => [2, 3])\n6\n\njulia> evaluate([x^2, x * y], [x,y] => [2, 3])\n2-element Array{Int64,1}:\n 4\n 6\n\n# You can also use the callable syntax\njulia> [x^2, x * y]([x,y] => [2, 3])\n2-element Array{Int64,1}:\n 4\n 6\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.expand","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.expand","text":"expand(e::Expression)\n\nExpand a given expression.\n\njulia> @var x y\n(x, y)\n\njulia> expand((x + y) ^ 2)\n2*x*y + x^2 + y^2\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.exponents_coefficients","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.exponents_coefficients","text":"exponents_coefficients(f::Expression, vars::AbstractVector{Variable}; expanded = false)\n\nReturn a matrix M containing the exponents for all occuring terms (one term per column) and a vector c containing the corresponding coefficients. Expands the given expression f unless expanded = true.\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.horner","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.horner","text":"horner(f::Expression, vars = variables(f))\n\nRewrite f using a multi-variate horner schema.\n\nExample\n\njulia> @var u v c[1:3]\n(u, v, Variable[c₁, c₂, c₃])\n\njulia> f = c[1] + c[2] * v + c[3] * u^2 * v^2 + c[3]u^3 * v\nc₁ + v*c₂ + u^2*v^2*c₃ + u^3*v*c₃\n\njulia> horner(f)\nc₁ + v*(c₂ + u^3*c₃ + u^2*v*c₃)\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.nvariables-Tuple{Expression}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.nvariables","text":"nvariables(expr::Expression; parameters = Variable[])\nnvariables(exprs::AbstractVector{Expression}; parameters = Variable[])\n\nObtain the number of variables used in the given expression not counting the the ones declared in parameters.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.monomials","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.monomials","text":"monomials(variables::AbstractVector{Variable}, d::Integer; homogeneous::Bool = false)\n\nCreate all monomials of a given degree in the given variables.\n\njulia> @var x y\n(x, y)\n\njulia> monomials([x,y], 2)\n6-element Array{Expression,1}:\nx^2\nx*y\ny^2\n  x\n  y\n  1\n\njulia> monomials([x,y], 2; homogeneous = true)\n3-element Array{Operation,1}:\n x ^ 2\n x * y\n y ^ 2\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.subs","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.subs","text":"subs(expr::Expression, subsitutions::Pair...)\nsubs(exprs::AbstractVector{<:Expression}, subsitutions::Pair...)\n\nApply the given substitutions to the given expressions.\n\nExamples\n\n@var x y\n\njulia> subs(x^2, x => y)\ny ^ 2\n\njulia> subs(x * y, [x,y] => [x+2,y+2])\n(x + 2) * (y + 2)\n\njulia> subs([x + y, x^2], x => y + 2, y => x + 2)\n2-element Array{Expression,1}:\n 4 + x + y\n (2 + y)^2\n\n# You can also use the callable syntax\njulia> (x * y)([x,y] => [x+2,y+2])\n (x + 2) * (y + 2)\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.rand_poly","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.rand_poly","text":"rand_poly(T = ComplexF64, vars::AbstractVector{Variable}, d::Integer; homogeneous::Bool = false)\n\nCreate a random dense polynomial of degree d in the given variables variables. Each coefficient is sampled independently via randn(T).\n\njulia> @var x y;\n\njulia> rand_poly(Float64, [x, y], 2)\n0.788764085756728 - 0.534507647623108*x - 0.778441366874946*y -\n 0.128891763280247*x*y + 0.878962738754971*x^2 + 0.550480741774464*y^2\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.to_number","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.to_number","text":"to_number(x::Expression)\n\nTries to unpack the Expression x to a native number type.\n\n```julia-repl julia> x = to_number(Expression(2)) 2\n\njulia> typeof(x) Int64\n\n\n\n\n\n","category":"function"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.variables-Tuple{Expression}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.variables","text":"variables(expr::Expression; parameters = Variable[])\nvariables(exprs::AbstractVector{Expression}; parameters = Variable[])\n\nObtain all variables used in the given expression up to the ones declared in parameters.\n\nExample\n\njulia> @var x y a;\njulia> variables(x^2 + y)\n2-element Array{Variable,1}:\n x\n y\n\njulia> variables([x^2 + a, y]; parameters = [a])\n2-element Array{Variable,1}:\n x\n y\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#System-1","page":"ModelKit","title":"System","text":"","category":"section"},{"location":"model_kit.html#","page":"ModelKit","title":"ModelKit","text":"System\ndegrees(F::System)\nexpressions(F::System)\nnparameters(::System)\nnvariables(::System)\nparameters(::System)\nvariables(::System)","category":"page"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.System","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.System","text":"System(exprs::AbstractVector{Expression};\n            variables = variables(exprssion),\n            parameters = Variable[])\nSystem(exprs, variables; parameters = Variable[])\n\nCreate a system from the given Expressions exprs. The variables determine also the variable ordering. The parameters argument allows to declare certain Variables as parameters.\n\nExamples\n\njulia> @var x y;\njulia> F = System([x^2, y^2]; variables = [y, x])\nSystem of length 2\n 2 variables: y, x\n\n x^2\n y^2\n\n# Systems are callable.\n# This evaluates F at y=2 and x=3\njulia> F([2, 3])\n2-element Array{Int64,1}:\n 9\n 4\n\nIt is also possible to declare parameters.\n\njulia> @var x y a b;\njulia> F = System([x^2 + a, y^2 + b]; variables = [y, x], parameters = [a, b])\nSystem of length 2\n 2 variables: y, x\n 2 parameters: a, b\n\n a + x^2\n b + y^2\n\njulia> F([2, 3], [5, -2])\n 2-element Array{Int64,1}:\n  14\n   2\n\n\n\n\n\n","category":"type"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.degrees-Tuple{System}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.degrees","text":"degrees(F::System)\n\nReturn the degrees of the given system.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.expressions-Tuple{System}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.expressions","text":"expressions(F::System)\n\nReturns the expressions of the given system F.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.nparameters-Tuple{System}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.nparameters","text":"nparameters(F::System)\n\nReturns the number of parameters of the given system F.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.nvariables-Tuple{System}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.nvariables","text":"nvariables(F::System)\n\nReturns the number of variables of the given system F.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.parameters-Tuple{System}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.parameters","text":"parameters(F::System)\n\nReturns the parameters of the given system F.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.variables-Tuple{System}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.variables","text":"variables(F::System)\n\nReturns the variables of the given system F.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#Homotopy-1","page":"ModelKit","title":"Homotopy","text":"","category":"section"},{"location":"model_kit.html#","page":"ModelKit","title":"ModelKit","text":"Homotopy\nexpressions(::Homotopy)\nnparameters(::Homotopy)\nnvariables(::Homotopy)\nparameters(::Homotopy)\nvariables(::Homotopy)","category":"page"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.Homotopy","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.Homotopy","text":"Homotopy(exprs, vars, t, parameters = Variable[])\n\nCreate a homotopy H(vars,t) from the given expressions exprs where vars are the given variables and t is the dedicated variable parameterizing the family of systems. The parameters argument allows to declare certain Variables as parameters.\n\nExample\n\njulia> @var x y t;\n\njulia> H = Homotopy([x + t, y + 2t], [y, x], t)\nHomotopy in t of length 2\n 2 variables: y, x\n\n t + x\n 2*t + y\n\njulia> H([2, 3], 0)\n2-element Array{Int64,1}:\n 3\n 2\n\n\njulia> H([2, 3], 1)\n2-element Array{Int64,1}:\n 4\n 4\n\nIt is also possible to declare additional variables.\n\njulia> @var x y t a b;\njulia> H = Homotopy([x^2 + t*a, y^2 + t*b], [x, y], t, [a, b])\nHomotopy in t of length 2\n 2 variables: x, y\n 2 parameters: a, b\n\n a*t + x^2\n b*t + y^2\njulia> H([2, 3], 1, [5, 2])\n2-element Array{Int64,1}:\n 9\n 11\n\n\n\n\n\n","category":"type"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.expressions-Tuple{Homotopy}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.expressions","text":"expressions(H::Homotopy)\n\nReturns the expressions of the given homotopy H.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.nparameters-Tuple{Homotopy}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.nparameters","text":"nparameters(H::Homotopy)\n\nReturns the number of parameters of the given homotopy H.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.nvariables-Tuple{Homotopy}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.nvariables","text":"nvariables(H::Homotopy)\n\nReturns the number of variables of the given homotopy H.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.parameters-Tuple{Homotopy}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.parameters","text":"parameters(H::Homotopy)\n\nReturns the parameters of the given homotopy H.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#HomotopyContinuation2.ModelKit.variables-Tuple{Homotopy}","page":"ModelKit","title":"HomotopyContinuation2.ModelKit.variables","text":"variables(H::Homotopy)\n\nReturns the variables of the given homotopy H.\n\n\n\n\n\n","category":"method"},{"location":"model_kit.html#Index-1","page":"ModelKit","title":"Index","text":"","category":"section"},{"location":"model_kit.html#","page":"ModelKit","title":"ModelKit","text":"Pages   = [\"model_kit.md\"]\nModules = [ModelKit]\nOrder   = [:type, :macro, :function]","category":"page"},{"location":"index.html#Documentation-1","page":"Documentation","title":"Documentation","text":"","category":"section"}]
}
